# ES6 소개

## ES6란?
ECMAScript를 ES라 줄여 부르고, 버전에 따라서 ES뒤에 숫자가 붙는다. ES6는 2015년에 효울적인 코드작성을 위해 만들어진 새로운 기술이다.

---
## ECMAscript가 생긴 배경
자바스크립트(Javascript)가 넷스케이프(Netscape) 브라우져만이 아니라 다른 웹 브라우져들의 지원까지 받기 시작하면서 다양한 웹 브라우져에서 자바스크립트(Javascript)가 공통되게 잘 작동하기 위해서 표준 규격이 필요해졌는데, 이 때문에, ECMA 국제 기구에서 “ECMAScript Standard”라 불리는 스크립트 표준이 만들어지게 된다.  
자바스크립트와 비슷한 뜻으로 많이 들어본 사람들이 있을텐데, Javascript는 ECMAScript와 BOM(Browser Object Model) 와 DOM(Document Object Model)이라는 1개의 코어와, 2개의 모델로 이루어져 있다.  
ECMAScript 와 Javascript 는 비슷한 뜻으로 자주 쓰이나 작은 차이를 가지고 있다.

---
## ECMAscript란?

ECMAScript는 자바 스크립트를 이루는 코어(Core) 스크립트 언어로, 웹 환경에서만 호스트 되는 언어가 아니다.  
웹 환경은 ECMA 스크립트가 호스트되는 환경들 중 하나일 뿐이다.  
ECMA 스크립트 호스트 환경은 ECMA 스크립트 실행 환경이 구현되있고, 각각 그 환경에 알맞는 확장성을 가지고 있다.  
예를들어 웹 브라우져 환경에서는 BOM(Browser Object Model)과 DOM(Document Object Model)이 그 확장성이 되겠다.  
이러한 확장성들은 ECMA 스크립트의 문법과 기능에 맞춰 기능의 확장을 가능게 한다.  
자바스크립트의 document 객체가 좋은 예이다.

---
## ES6 트랜스파일링
모든 웹 브라우저가 ES6를 지원하지 않는다. 그리고 Es6를 지원하더라도 모든 ES6 기능을 지원하지 않는 경우도 많다. 그러니 브라우저에서 ES6코드를 실행하기 전에 ES5로 컴파일을 하면 ES6가 제대로 동작하도록 보장할 수 있다. - 이런 변환을 **트랜스파일링**이라고 한다. -
> 가장 유명한 트랜스파일링 도구는 **바벨**이 있다.  
> http://babeljs.io  
  
---  
## ES6 객체와 배열
ES6는 객체와 배열을 다루는 방법과 객체와 배열 안에서 변수의 영역을 제한하는 방법을 다양하게 제공한다. 그러한 기능으로는 *구조분해, 객체 리터럴 개선, 스프에드 연산자*등이 있다.

>  구조분해  
- 객체 안에 있는 필드 값을 원하는 변수에 대입할 수 있다.  
다음 sandwich 객체를 보면 sandwich에는 4개의 필드가 있다. 그중에서 bread와 meat필드의 값이 필요하다.
```js
var sandwich = {
    bread: "더치 크런치",
    meat:"참치",
    cheese:"스위스",
    toppings:["상추", "토마토", "머스타드"],
};

var {bread, meat} = sandwich;

console.log(bread, meat) // 더치 크런치 참치
```

이 코드는 sandwich를 분해해서 bread와 meat 필드를 같은 이름의 변수에 넣어준다. 두 변수의 값은 sandwich에 있는 같은 이름의 필드 값으로 초기화 되지만, 두 변수를 변경해도 원래의 필드 값은 바뀌지 않는다.

```js
var {bread, meat} = sandwich;

bread = "마늘";
meat = "칠면조";

console.log(bread) // 마늘
console.log(meat) // 칠면조

console.log(sandwich.bread, sandwich.meat) // 더치 크런치 참치
```
객체를 분해해서 함수의 인자로도 넘길 수 있다. 어떤 사람의 이름을 영주처럼 표현해주는 함수를 생각해볼때
```js
var lordify = regularPerson => {
    console.log(`캔터베리의 ${regularPerson.firstname}`);
}

var regularPerson = {
    firstname: "준우",
    lastname: "김",
};

lordify(regularPerson) // 캔터베리의 준우
```
객체의 필드에 접근하기 위해 점(.)과 필드 이름을 사용하는 대신 regularPerson에서 필요한 값을 구조 분해로 가져올 수 있다.
```js
var lordify = ({firstname}) => {
    console.log(`캔터베리의 ${firstname}`);
}

lordify(regularPerson); // 캔터베리의 준우
```
구조 분해는 더 선언적이다. 따라서 코드를 작성한 사람의 의도를 더 잘 설명해준다. 구조 분해로 firstname을 가져옴으로써 객체의 필드 중에서 firstname만 사용한다는 사실을 선언한다.  

배열을 구조 분해해서 원소의 값을 변수에 대입할 수 도 있다. 배열의 첫 번째 원소를 변수에 대입하고 싶다고 할때

```js
var [firstResort] = ["용평", "평창", "강촌"];
console.log(firstResort) // 용평
```
불필요한 값을 콤마(,)를 사용해서 생략하는 리스트 매칭을 사용할 수도 있다. 무시하고 싶은 원소 위치에 콤마를 넣으면 리스트 매칭된다. 위 배열에서 첫 두 원소를 콤마로 대치하면 다음과 같다.

```js
var [,,thirdResort] = ["용평","평창","강촌"]
console.log(thirdResort) // 강촌
```

---